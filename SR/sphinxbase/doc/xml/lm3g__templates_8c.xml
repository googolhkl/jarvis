<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.9.1">
  <compounddef id="lm3g__templates_8c" kind="file" language="C++">
    <compoundname>lm3g_templates.c</compoundname>
    <includes local="no">assert.h</includes>
    <includedby refid="ngram__model__arpa_8c" local="yes">src/libsphinxbase/lm/ngram_model_arpa.c</includedby>
    <includedby refid="ngram__model__dmp_8c" local="yes">src/libsphinxbase/lm/ngram_model_dmp.c</includedby>
    <incdepgraph>
      <node id="1754">
        <label>src/libsphinxbase/lm/lm3g_templates.c</label>
        <link refid="lm3g_templates.c"/>
        <childnode refid="1755" relation="include">
        </childnode>
      </node>
      <node id="1755">
        <label>assert.h</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="1756">
        <label>src/libsphinxbase/lm/lm3g_templates.c</label>
        <link refid="lm3g_templates.c"/>
        <childnode refid="1757" relation="include">
        </childnode>
        <childnode refid="1758" relation="include">
        </childnode>
      </node>
      <node id="1758">
        <label>src/libsphinxbase/lm/ngram_model_dmp.c</label>
        <link refid="ngram__model__dmp_8c_source"/>
      </node>
      <node id="1757">
        <label>src/libsphinxbase/lm/ngram_model_arpa.c</label>
        <link refid="ngram__model__arpa_8c_source"/>
      </node>
    </invincdepgraph>
    <innerclass refid="structlm3g__iter__s" prot="public">lm3g_iter_s</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="lm3g__templates_8c_1ae4ce68e64ab437734402bbc3bc3ae0f8" prot="public" static="no">
        <name>BINARY_SEARCH_THRESH</name>
        <initializer>16</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/hkl/voice/sphinxbase/src/libsphinxbase/lm/lm3g_templates.c" line="45" column="9" bodyfile="/home/hkl/voice/sphinxbase/src/libsphinxbase/lm/lm3g_templates.c" bodystart="45" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="lm3g__templates_8c_1a40ab4bbe3af49b9d7f62d148b51c2307" prot="public" static="no">
        <type>struct <ref refid="structlm3g__iter__s" kindref="compound">lm3g_iter_s</ref></type>
        <definition>typedef struct lm3g_iter_s  lm3g_iter_t</definition>
        <argsstring></argsstring>
        <name>lm3g_iter_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/hkl/voice/sphinxbase/src/libsphinxbase/lm/lm3g_templates.c" line="285" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="lm3g__templates_8c_1a834178edffa22295ddbfacf6f599dd62" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32</type>
        <definition>static int32 find_bg</definition>
        <argsstring>(bigram_t *bg, int32 n, int32 w)</argsstring>
        <name>find_bg</name>
        <param>
          <type><ref refid="structbigram__s" kindref="compound">bigram_t</ref> *</type>
          <declname>bg</declname>
        </param>
        <param>
          <type>int32</type>
          <declname>n</declname>
        </param>
        <param>
          <type>int32</type>
          <declname>w</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/hkl/voice/sphinxbase/src/libsphinxbase/lm/lm3g_templates.c" line="47" column="1" bodyfile="/home/hkl/voice/sphinxbase/src/libsphinxbase/lm/lm3g_templates.c" bodystart="47" bodyend="67"/>
      </memberdef>
      <memberdef kind="function" id="lm3g__templates_8c_1a1ccff350427f193a0dc49e8d305dba82" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32</type>
        <definition>static int32 lm3g_bg_score</definition>
        <argsstring>(NGRAM_MODEL_TYPE *model, int32 lw1, int32 lw2, int32 *n_used)</argsstring>
        <name>lm3g_bg_score</name>
        <param>
          <type>NGRAM_MODEL_TYPE *</type>
          <declname>model</declname>
        </param>
        <param>
          <type>int32</type>
          <declname>lw1</declname>
        </param>
        <param>
          <type>int32</type>
          <declname>lw2</declname>
        </param>
        <param>
          <type>int32 *</type>
          <declname>n_used</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/hkl/voice/sphinxbase/src/libsphinxbase/lm/lm3g_templates.c" line="70" column="1" bodyfile="/home/hkl/voice/sphinxbase/src/libsphinxbase/lm/lm3g_templates.c" bodystart="70" bodyend="97"/>
      </memberdef>
      <memberdef kind="function" id="lm3g__templates_8c_1a5617226afc1b4dde9f33bb8eac40fc9a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void load_tginfo</definition>
        <argsstring>(NGRAM_MODEL_TYPE *model, int32 lw1, int32 lw2)</argsstring>
        <name>load_tginfo</name>
        <param>
          <type>NGRAM_MODEL_TYPE *</type>
          <declname>model</declname>
        </param>
        <param>
          <type>int32</type>
          <declname>lw1</declname>
        </param>
        <param>
          <type>int32</type>
          <declname>lw2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/hkl/voice/sphinxbase/src/libsphinxbase/lm/lm3g_templates.c" line="100" column="1" bodyfile="/home/hkl/voice/sphinxbase/src/libsphinxbase/lm/lm3g_templates.c" bodystart="100" bodyend="134"/>
      </memberdef>
      <memberdef kind="function" id="lm3g__templates_8c_1a2b4a29f723ae02fcdba781c93708eeaa" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32</type>
        <definition>static int32 find_tg</definition>
        <argsstring>(trigram_t *tg, int32 n, uint32 w)</argsstring>
        <name>find_tg</name>
        <param>
          <type><ref refid="structtrigram__s" kindref="compound">trigram_t</ref> *</type>
          <declname>tg</declname>
        </param>
        <param>
          <type>int32</type>
          <declname>n</declname>
        </param>
        <param>
          <type>uint32</type>
          <declname>w</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/hkl/voice/sphinxbase/src/libsphinxbase/lm/lm3g_templates.c" line="138" column="1" bodyfile="/home/hkl/voice/sphinxbase/src/libsphinxbase/lm/lm3g_templates.c" bodystart="138" bodyend="156"/>
      </memberdef>
      <memberdef kind="function" id="lm3g__templates_8c_1a36d47338ceb94243b90ef6977fbf6833" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32</type>
        <definition>static int32 lm3g_tg_score</definition>
        <argsstring>(NGRAM_MODEL_TYPE *model, int32 lw1, int32 lw2, int32 lw3, int32 *n_used)</argsstring>
        <name>lm3g_tg_score</name>
        <param>
          <type>NGRAM_MODEL_TYPE *</type>
          <declname>model</declname>
        </param>
        <param>
          <type>int32</type>
          <declname>lw1</declname>
        </param>
        <param>
          <type>int32</type>
          <declname>lw2</declname>
        </param>
        <param>
          <type>int32</type>
          <declname>lw3</declname>
        </param>
        <param>
          <type>int32 *</type>
          <declname>n_used</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/hkl/voice/sphinxbase/src/libsphinxbase/lm/lm3g_templates.c" line="159" column="1" bodyfile="/home/hkl/voice/sphinxbase/src/libsphinxbase/lm/lm3g_templates.c" bodystart="159" bodyend="202"/>
      </memberdef>
      <memberdef kind="function" id="lm3g__templates_8c_1adef1ba8749bb595ef94c76ea506266a2" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32</type>
        <definition>static int32 lm3g_template_score</definition>
        <argsstring>(ngram_model_t *base, int32 wid, int32 *history, int32 n_hist, int32 *n_used)</argsstring>
        <name>lm3g_template_score</name>
        <param>
          <type><ref refid="ngram__model_8h_1afaaf0c00e20056d97efcd97e4cae4ea7" kindref="member">ngram_model_t</ref> *</type>
          <declname>base</declname>
        </param>
        <param>
          <type>int32</type>
          <declname>wid</declname>
        </param>
        <param>
          <type>int32 *</type>
          <declname>history</declname>
        </param>
        <param>
          <type>int32</type>
          <declname>n_hist</declname>
        </param>
        <param>
          <type>int32 *</type>
          <declname>n_used</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/hkl/voice/sphinxbase/src/libsphinxbase/lm/lm3g_templates.c" line="205" column="1" bodyfile="/home/hkl/voice/sphinxbase/src/libsphinxbase/lm/lm3g_templates.c" bodystart="205" bodyend="222"/>
      </memberdef>
      <memberdef kind="function" id="lm3g__templates_8c_1a6d96bebdd92347ffaa1a49c869c628b3" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32</type>
        <definition>static int32 lm3g_template_raw_score</definition>
        <argsstring>(ngram_model_t *base, int32 wid, int32 *history, int32 n_hist, int32 *n_used)</argsstring>
        <name>lm3g_template_raw_score</name>
        <param>
          <type><ref refid="ngram__model_8h_1afaaf0c00e20056d97efcd97e4cae4ea7" kindref="member">ngram_model_t</ref> *</type>
          <declname>base</declname>
        </param>
        <param>
          <type>int32</type>
          <declname>wid</declname>
        </param>
        <param>
          <type>int32 *</type>
          <declname>history</declname>
        </param>
        <param>
          <type>int32</type>
          <declname>n_hist</declname>
        </param>
        <param>
          <type>int32 *</type>
          <declname>n_used</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/hkl/voice/sphinxbase/src/libsphinxbase/lm/lm3g_templates.c" line="225" column="1" bodyfile="/home/hkl/voice/sphinxbase/src/libsphinxbase/lm/lm3g_templates.c" bodystart="225" bodyend="263"/>
      </memberdef>
      <memberdef kind="function" id="lm3g__templates_8c_1ae36b44c3405062d0ea64ba90eb9d1979" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32</type>
        <definition>static int32 lm3g_template_add_ug</definition>
        <argsstring>(ngram_model_t *base, int32 wid, int32 lweight)</argsstring>
        <name>lm3g_template_add_ug</name>
        <param>
          <type><ref refid="ngram__model_8h_1afaaf0c00e20056d97efcd97e4cae4ea7" kindref="member">ngram_model_t</ref> *</type>
          <declname>base</declname>
        </param>
        <param>
          <type>int32</type>
          <declname>wid</declname>
        </param>
        <param>
          <type>int32</type>
          <declname>lweight</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/hkl/voice/sphinxbase/src/libsphinxbase/lm/lm3g_templates.c" line="266" column="1" bodyfile="/home/hkl/voice/sphinxbase/src/libsphinxbase/lm/lm3g_templates.c" bodystart="266" bodyend="271"/>
      </memberdef>
      <memberdef kind="function" id="lm3g__templates_8c_1ad37412ce1d19af88743bb950b1fc3568" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void lm3g_template_flush</definition>
        <argsstring>(ngram_model_t *base)</argsstring>
        <name>lm3g_template_flush</name>
        <param>
          <type><ref refid="ngram__model_8h_1afaaf0c00e20056d97efcd97e4cae4ea7" kindref="member">ngram_model_t</ref> *</type>
          <declname>base</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/hkl/voice/sphinxbase/src/libsphinxbase/lm/lm3g_templates.c" line="274" column="1" bodyfile="/home/hkl/voice/sphinxbase/src/libsphinxbase/lm/lm3g_templates.c" bodystart="274" bodyend="278"/>
      </memberdef>
      <memberdef kind="function" id="lm3g__templates_8c_1a2a3bcc40807b887d4755d598ff241bf2" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="ngram__model_8h_1ac7de090a02fa12a8bba84abb4d5236aa" kindref="member">ngram_iter_t</ref> *</type>
        <definition>static ngram_iter_t* lm3g_template_iter</definition>
        <argsstring>(ngram_model_t *base, int32 wid, int32 *history, int32 n_hist)</argsstring>
        <name>lm3g_template_iter</name>
        <param>
          <type><ref refid="ngram__model_8h_1afaaf0c00e20056d97efcd97e4cae4ea7" kindref="member">ngram_model_t</ref> *</type>
          <declname>base</declname>
        </param>
        <param>
          <type>int32</type>
          <declname>wid</declname>
        </param>
        <param>
          <type>int32 *</type>
          <declname>history</declname>
        </param>
        <param>
          <type>int32</type>
          <declname>n_hist</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/hkl/voice/sphinxbase/src/libsphinxbase/lm/lm3g_templates.c" line="288" column="1" bodyfile="/home/hkl/voice/sphinxbase/src/libsphinxbase/lm/lm3g_templates.c" bodystart="288" bodyend="366"/>
      </memberdef>
      <memberdef kind="function" id="lm3g__templates_8c_1a716645e520ac0e0fa94737117101a468" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="ngram__model_8h_1ac7de090a02fa12a8bba84abb4d5236aa" kindref="member">ngram_iter_t</ref> *</type>
        <definition>static ngram_iter_t* lm3g_template_mgrams</definition>
        <argsstring>(ngram_model_t *base, int m)</argsstring>
        <name>lm3g_template_mgrams</name>
        <param>
          <type><ref refid="ngram__model_8h_1afaaf0c00e20056d97efcd97e4cae4ea7" kindref="member">ngram_model_t</ref> *</type>
          <declname>base</declname>
        </param>
        <param>
          <type>int</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/hkl/voice/sphinxbase/src/libsphinxbase/lm/lm3g_templates.c" line="369" column="1" bodyfile="/home/hkl/voice/sphinxbase/src/libsphinxbase/lm/lm3g_templates.c" bodystart="369" bodyend="393"/>
      </memberdef>
      <memberdef kind="function" id="lm3g__templates_8c_1a9d18e29415291f709731a98e517a592c" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="ngram__model_8h_1ac7de090a02fa12a8bba84abb4d5236aa" kindref="member">ngram_iter_t</ref> *</type>
        <definition>static ngram_iter_t* lm3g_template_successors</definition>
        <argsstring>(ngram_iter_t *bitor)</argsstring>
        <name>lm3g_template_successors</name>
        <param>
          <type><ref refid="ngram__model_8h_1ac7de090a02fa12a8bba84abb4d5236aa" kindref="member">ngram_iter_t</ref> *</type>
          <declname>bitor</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/hkl/voice/sphinxbase/src/libsphinxbase/lm/lm3g_templates.c" line="396" column="1" bodyfile="/home/hkl/voice/sphinxbase/src/libsphinxbase/lm/lm3g_templates.c" bodystart="396" bodyend="447"/>
      </memberdef>
      <memberdef kind="function" id="lm3g__templates_8c_1a63744683bd4adb40f80957a04b3b44ea" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32 const *</type>
        <definition>static int32 const* lm3g_template_iter_get</definition>
        <argsstring>(ngram_iter_t *base, int32 *out_score, int32 *out_bowt)</argsstring>
        <name>lm3g_template_iter_get</name>
        <param>
          <type><ref refid="ngram__model_8h_1ac7de090a02fa12a8bba84abb4d5236aa" kindref="member">ngram_iter_t</ref> *</type>
          <declname>base</declname>
        </param>
        <param>
          <type>int32 *</type>
          <declname>out_score</declname>
        </param>
        <param>
          <type>int32 *</type>
          <declname>out_bowt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/hkl/voice/sphinxbase/src/libsphinxbase/lm/lm3g_templates.c" line="450" column="1" bodyfile="/home/hkl/voice/sphinxbase/src/libsphinxbase/lm/lm3g_templates.c" bodystart="450" bodyend="483"/>
      </memberdef>
      <memberdef kind="function" id="lm3g__templates_8c_1a03fcfdf9876ed4ed11e279051192232a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="ngram__model_8h_1ac7de090a02fa12a8bba84abb4d5236aa" kindref="member">ngram_iter_t</ref> *</type>
        <definition>static ngram_iter_t* lm3g_template_iter_next</definition>
        <argsstring>(ngram_iter_t *base)</argsstring>
        <name>lm3g_template_iter_next</name>
        <param>
          <type><ref refid="ngram__model_8h_1ac7de090a02fa12a8bba84abb4d5236aa" kindref="member">ngram_iter_t</ref> *</type>
          <declname>base</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/hkl/voice/sphinxbase/src/libsphinxbase/lm/lm3g_templates.c" line="486" column="1" bodyfile="/home/hkl/voice/sphinxbase/src/libsphinxbase/lm/lm3g_templates.c" bodystart="486" bodyend="554"/>
      </memberdef>
      <memberdef kind="function" id="lm3g__templates_8c_1a469d0c991c4effd6ba05e960ba75dbfd" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void lm3g_template_iter_free</definition>
        <argsstring>(ngram_iter_t *base)</argsstring>
        <name>lm3g_template_iter_free</name>
        <param>
          <type><ref refid="ngram__model_8h_1ac7de090a02fa12a8bba84abb4d5236aa" kindref="member">ngram_iter_t</ref> *</type>
          <declname>base</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/hkl/voice/sphinxbase/src/libsphinxbase/lm/lm3g_templates.c" line="557" column="1" bodyfile="/home/hkl/voice/sphinxbase/src/libsphinxbase/lm/lm3g_templates.c" bodystart="557" bodyend="560"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*<sp/>-*-<sp/>c-basic-offset:<sp/>4;<sp/>indent-tabs-mode:<sp/>nil<sp/>-*-<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>====================================================================</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>1999-2007<sp/>Carnegie<sp/>Mellon<sp/>University.<sp/><sp/>All<sp/>rights</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>reserved.</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>Redistribution<sp/>and<sp/>use<sp/>in<sp/>source<sp/>and<sp/>binary<sp/>forms,<sp/>with<sp/>or<sp/>without</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>modification,<sp/>are<sp/>permitted<sp/>provided<sp/>that<sp/>the<sp/>following<sp/>conditions</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/>are<sp/>met:</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/>1.<sp/>Redistributions<sp/>of<sp/>source<sp/>code<sp/>must<sp/>retain<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer.<sp/></highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/>2.<sp/>Redistributions<sp/>in<sp/>binary<sp/>form<sp/>must<sp/>reproduce<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer<sp/>in</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>the<sp/>documentation<sp/>and/or<sp/>other<sp/>materials<sp/>provided<sp/>with<sp/>the</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>distribution.</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*<sp/>This<sp/>work<sp/>was<sp/>supported<sp/>in<sp/>part<sp/>by<sp/>funding<sp/>from<sp/>the<sp/>Defense<sp/>Advanced<sp/></highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*<sp/>Research<sp/>Projects<sp/>Agency<sp/>and<sp/>the<sp/>National<sp/>Science<sp/>Foundation<sp/>of<sp/>the<sp/></highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*<sp/>United<sp/>States<sp/>of<sp/>America,<sp/>and<sp/>the<sp/>CMU<sp/>Sphinx<sp/>Speech<sp/>Consortium.</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/>*<sp/>THIS<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>BY<sp/>CARNEGIE<sp/>MELLON<sp/>UNIVERSITY<sp/>``AS<sp/>IS&apos;&apos;<sp/>AND<sp/></highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/>*<sp/>ANY<sp/>EXPRESSED<sp/>OR<sp/>IMPLIED<sp/>WARRANTIES,<sp/>INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,<sp/></highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/>*<sp/>THE<sp/>IMPLIED<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY<sp/>AND<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR</highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/>*<sp/>PURPOSE<sp/>ARE<sp/>DISCLAIMED.<sp/><sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>CARNEGIE<sp/>MELLON<sp/>UNIVERSITY</highlight></codeline>
<codeline lineno="26"><highlight class="comment"><sp/>*<sp/>NOR<sp/>ITS<sp/>EMPLOYEES<sp/>BE<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>DIRECT,<sp/>INDIRECT,<sp/>INCIDENTAL,</highlight></codeline>
<codeline lineno="27"><highlight class="comment"><sp/>*<sp/>SPECIAL,<sp/>EXEMPLARY,<sp/>OR<sp/>CONSEQUENTIAL<sp/>DAMAGES<sp/>(INCLUDING,<sp/>BUT<sp/>NOT<sp/></highlight></codeline>
<codeline lineno="28"><highlight class="comment"><sp/>*<sp/>LIMITED<sp/>TO,<sp/>PROCUREMENT<sp/>OF<sp/>SUBSTITUTE<sp/>GOODS<sp/>OR<sp/>SERVICES;<sp/>LOSS<sp/>OF<sp/>USE,<sp/></highlight></codeline>
<codeline lineno="29"><highlight class="comment"><sp/>*<sp/>DATA,<sp/>OR<sp/>PROFITS;<sp/>OR<sp/>BUSINESS<sp/>INTERRUPTION)<sp/>HOWEVER<sp/>CAUSED<sp/>AND<sp/>ON<sp/>ANY<sp/></highlight></codeline>
<codeline lineno="30"><highlight class="comment"><sp/>*<sp/>THEORY<sp/>OF<sp/>LIABILITY,<sp/>WHETHER<sp/>IN<sp/>CONTRACT,<sp/>STRICT<sp/>LIABILITY,<sp/>OR<sp/>TORT<sp/></highlight></codeline>
<codeline lineno="31"><highlight class="comment"><sp/>*<sp/>(INCLUDING<sp/>NEGLIGENCE<sp/>OR<sp/>OTHERWISE)<sp/>ARISING<sp/>IN<sp/>ANY<sp/>WAY<sp/>OUT<sp/>OF<sp/>THE<sp/>USE<sp/></highlight></codeline>
<codeline lineno="32"><highlight class="comment"><sp/>*<sp/>OF<sp/>THIS<sp/>SOFTWARE,<sp/>EVEN<sp/>IF<sp/>ADVISED<sp/>OF<sp/>THE<sp/>POSSIBILITY<sp/>OF<sp/>SUCH<sp/>DAMAGE.</highlight></codeline>
<codeline lineno="33"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="34"><highlight class="comment"><sp/>*<sp/>====================================================================</highlight></codeline>
<codeline lineno="35"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="36"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="38"><highlight class="comment"><sp/>*<sp/>\file<sp/>lm3g_templates.c<sp/>Core<sp/>Sphinx<sp/>3-gram<sp/>code<sp/>used<sp/>in</highlight></codeline>
<codeline lineno="39"><highlight class="comment"><sp/>*<sp/>DMP/DMP32/ARPA<sp/>(for<sp/>now)<sp/>model<sp/>code.</highlight></codeline>
<codeline lineno="40"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;assert.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Locate<sp/>a<sp/>specific<sp/>bigram<sp/>within<sp/>a<sp/>bigram<sp/>list<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BINARY_SEARCH_THRESH<sp/><sp/><sp/><sp/>16</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>int32</highlight></codeline>
<codeline lineno="47"><highlight class="normal">find_bg(<ref refid="structbigram__s" kindref="compound">bigram_t</ref><sp/>*<sp/>bg,<sp/>int32<sp/>n,<sp/>int32<sp/>w)</highlight></codeline>
<codeline lineno="48"><highlight class="normal">{</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/>int32<sp/>i,<sp/>b,<sp/>e;</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Binary<sp/>search<sp/>until<sp/>segment<sp/>size<sp/>&lt;<sp/>threshold<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/>b<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/>e<sp/>=<sp/>n;</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(e<sp/>-<sp/>b<sp/>&gt;<sp/>BINARY_SEARCH_THRESH)<sp/>{</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i<sp/>=<sp/>(b<sp/>+<sp/>e)<sp/>&gt;&gt;<sp/>1;</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bg[i].wid<sp/>&lt;<sp/>w)</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>b<sp/>=<sp/>i<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bg[i].wid<sp/>&gt;<sp/>w)</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>e<sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Linear<sp/>search<sp/>within<sp/>narrowed<sp/>segment<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>b;<sp/>(i<sp/>&lt;<sp/>e)<sp/>&amp;&amp;<sp/>(bg[i].wid<sp/>!=<sp/>w);<sp/>i++);</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>((i<sp/>&lt;<sp/>e)<sp/>?<sp/>i<sp/>:<sp/>-1);</highlight></codeline>
<codeline lineno="67"><highlight class="normal">}</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>int32</highlight></codeline>
<codeline lineno="70"><highlight class="normal">lm3g_bg_score(NGRAM_MODEL_TYPE<sp/>*model,</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int32<sp/>lw1,<sp/>int32<sp/>lw2,<sp/>int32<sp/>*n_used)</highlight></codeline>
<codeline lineno="72"><highlight class="normal">{</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/>int32<sp/>i,<sp/>n,<sp/>b,<sp/>score;</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structbigram__s" kindref="compound">bigram_t</ref><sp/>*bg;</highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(lw1<sp/>&lt;<sp/>0<sp/>||<sp/>model-&gt;base.n<sp/>&lt;<sp/>2)<sp/>{</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*n_used<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>model-&gt;lm3g.unigrams[lw2].prob1.l;</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/>b<sp/>=<sp/>FIRST_BG(model,<sp/>lw1);</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/>n<sp/>=<sp/>FIRST_BG(model,<sp/>lw1<sp/>+<sp/>1)<sp/>-<sp/>b;</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/>bg<sp/>=<sp/>model-&gt;lm3g.bigrams<sp/>+<sp/>b;</highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((i<sp/>=<sp/>find_bg(bg,<sp/>n,<sp/>lw2))<sp/>&gt;=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Access<sp/>mode<sp/>=<sp/>bigram<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*n_used<sp/>=<sp/>2;</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>score<sp/>=<sp/>model-&gt;lm3g.<ref refid="structbigram__s_1a769b8a54f864ac4844e37cfa17ed1af0" kindref="member">prob2</ref>[bg[i].<ref refid="structbigram__s_1a769b8a54f864ac4844e37cfa17ed1af0" kindref="member">prob2</ref>].l;</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Access<sp/>mode<sp/>=<sp/>unigram<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*n_used<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>score<sp/>=<sp/>model-&gt;lm3g.unigrams[lw1].bo_wt1.l<sp/>+<sp/>model-&gt;lm3g.unigrams[lw2].prob1.l;</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(score);</highlight></codeline>
<codeline lineno="97"><highlight class="normal">}</highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal">load_tginfo(NGRAM_MODEL_TYPE<sp/>*model,<sp/>int32<sp/>lw1,<sp/>int32<sp/>lw2)</highlight></codeline>
<codeline lineno="101"><highlight class="normal">{</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/>int32<sp/>i,<sp/>n,<sp/>b,<sp/>t;</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structbigram__s" kindref="compound">bigram_t</ref><sp/>*bg;</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structtginfo__s" kindref="compound">tginfo_t</ref><sp/>*tginfo;</highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>First<sp/>allocate<sp/>space<sp/>for<sp/>tg<sp/>information<sp/>for<sp/>bg<sp/>lw1,lw2<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/>tginfo<sp/>=<sp/>(<ref refid="structtginfo__s" kindref="compound">tginfo_t</ref><sp/>*)<sp/><ref refid="listelem__alloc_8h_1ad0c40e65d9cca0d7ec08fcf416b09af2" kindref="member">listelem_malloc</ref>(model-&gt;lm3g.le);</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/>tginfo-&gt;<ref refid="structtginfo__s_1aa151a34891820c55e0fef60cc74b6e05" kindref="member">w1</ref><sp/>=<sp/>lw1;</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/>tginfo-&gt;<ref refid="structtginfo__s_1a3642dc5ac56de1829665bb7d42c9372a" kindref="member">tg</ref><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/>tginfo-&gt;<ref refid="structtginfo__s_1a184e60660a4c8168b5268260cd98ffa5" kindref="member">next</ref><sp/>=<sp/>model-&gt;lm3g.tginfo[lw2];</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/>model-&gt;lm3g.tginfo[lw2]<sp/>=<sp/>tginfo;</highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Locate<sp/>bigram<sp/>lw1,lw2<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/>b<sp/>=<sp/>model-&gt;lm3g.unigrams[lw1].bigrams;</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/>n<sp/>=<sp/>model-&gt;lm3g.unigrams[lw1<sp/>+<sp/>1].bigrams<sp/>-<sp/>b;</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/>bg<sp/>=<sp/>model-&gt;lm3g.bigrams<sp/>+<sp/>b;</highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((n<sp/>&gt;<sp/>0)<sp/>&amp;&amp;<sp/>((i<sp/>=<sp/>find_bg(bg,<sp/>n,<sp/>lw2))<sp/>&gt;=<sp/>0))<sp/>{</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tginfo-&gt;<ref refid="structtginfo__s_1ac5e9be48da8563941be03f3cd09e3c25" kindref="member">bowt</ref><sp/>=<sp/>model-&gt;lm3g.bo_wt2[bg[i].<ref refid="structbigram__s_1a410991054e81251285cbc209964cdaf4" kindref="member">bo_wt2</ref>].l;</highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Find<sp/>t<sp/>=<sp/>Absolute<sp/>first<sp/>trigram<sp/>index<sp/>for<sp/>bigram<sp/>lw1,lw2<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>b<sp/>+=<sp/>i;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>b<sp/>=<sp/>Absolute<sp/>index<sp/>of<sp/>bigram<sp/>lw1,lw2<sp/>on<sp/>disk<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t<sp/>=<sp/>FIRST_TG(model,<sp/>b);</highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tginfo-&gt;<ref refid="structtginfo__s_1a3642dc5ac56de1829665bb7d42c9372a" kindref="member">tg</ref><sp/>=<sp/>model-&gt;lm3g.trigrams<sp/>+<sp/>t;</highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Find<sp/>#tg<sp/>for<sp/>bigram<sp/>w1,w2<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tginfo-&gt;<ref refid="structtginfo__s_1a5eb046b3d09a4c80e4cdf216c6c7eb46" kindref="member">n_tg</ref><sp/>=<sp/>FIRST_TG(model,<sp/>b<sp/>+<sp/>1)<sp/>-<sp/>t;</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>No<sp/>bigram<sp/>w1,w2<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tginfo-&gt;<ref refid="structtginfo__s_1ac5e9be48da8563941be03f3cd09e3c25" kindref="member">bowt</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tginfo-&gt;<ref refid="structtginfo__s_1a5eb046b3d09a4c80e4cdf216c6c7eb46" kindref="member">n_tg</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="134"><highlight class="normal">}</highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Similar<sp/>to<sp/>find_bg<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>int32</highlight></codeline>
<codeline lineno="138"><highlight class="normal">find_tg(<ref refid="structtrigram__s" kindref="compound">trigram_t</ref><sp/>*<sp/>tg,<sp/>int32<sp/>n,<sp/>uint32<sp/>w)</highlight></codeline>
<codeline lineno="139"><highlight class="normal">{</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/>int32<sp/>i,<sp/>b,<sp/>e;</highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/>b<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/>e<sp/>=<sp/>n;</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(e<sp/>-<sp/>b<sp/>&gt;<sp/>BINARY_SEARCH_THRESH)<sp/>{</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i<sp/>=<sp/>(b<sp/>+<sp/>e)<sp/>&gt;&gt;<sp/>1;</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tg[i].wid<sp/>&lt;<sp/>w)</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>b<sp/>=<sp/>i<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tg[i].wid<sp/>&gt;<sp/>w)</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>e<sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>b;<sp/>(i<sp/>&lt;<sp/>e)<sp/>&amp;&amp;<sp/>(tg[i].wid<sp/>!=<sp/>w);<sp/>i++);</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>((i<sp/>&lt;<sp/>e)<sp/>?<sp/>i<sp/>:<sp/>-1);</highlight></codeline>
<codeline lineno="156"><highlight class="normal">}</highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>int32</highlight></codeline>
<codeline lineno="159"><highlight class="normal">lm3g_tg_score(NGRAM_MODEL_TYPE<sp/>*model,<sp/>int32<sp/>lw1,</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int32<sp/>lw2,<sp/>int32<sp/>lw3,<sp/>int32<sp/>*n_used)</highlight></codeline>
<codeline lineno="161"><highlight class="normal">{</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structngram__model__s" kindref="compound">ngram_model_t</ref><sp/>*base<sp/>=<sp/>&amp;model-&gt;base;</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/>int32<sp/>i,<sp/>n,<sp/>score;</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structtrigram__s" kindref="compound">trigram_t</ref><sp/>*tg;</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structtginfo__s" kindref="compound">tginfo_t</ref><sp/>*tginfo,<sp/>*prev_tginfo;</highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((base-&gt;<ref refid="structngram__model__s_1a3c87bc1b678662a2c8930b3b8c33a80f" kindref="member">n</ref><sp/>&lt;<sp/>3)<sp/>||<sp/>(lw1<sp/>&lt;<sp/>0)<sp/>||<sp/>(lw2<sp/>&lt;<sp/>0))</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(lm3g_bg_score(model,<sp/>lw2,<sp/>lw3,<sp/>n_used));</highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/>prev_tginfo<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(tginfo<sp/>=<sp/>model-&gt;lm3g.tginfo[lw2];<sp/>tginfo;<sp/>tginfo<sp/>=<sp/>tginfo-&gt;<ref refid="structtginfo__s_1a184e60660a4c8168b5268260cd98ffa5" kindref="member">next</ref>)<sp/>{</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tginfo-&gt;<ref refid="structtginfo__s_1aa151a34891820c55e0fef60cc74b6e05" kindref="member">w1</ref><sp/>==<sp/>lw1)</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>prev_tginfo<sp/>=<sp/>tginfo;</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!tginfo)<sp/>{</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>load_tginfo(model,<sp/>lw1,<sp/>lw2);</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tginfo<sp/>=<sp/>model-&gt;lm3g.tginfo[lw2];</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(prev_tginfo)<sp/>{</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>prev_tginfo-&gt;<ref refid="structtginfo__s_1a184e60660a4c8168b5268260cd98ffa5" kindref="member">next</ref><sp/>=<sp/>tginfo-&gt;<ref refid="structtginfo__s_1a184e60660a4c8168b5268260cd98ffa5" kindref="member">next</ref>;</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tginfo-&gt;<ref refid="structtginfo__s_1a184e60660a4c8168b5268260cd98ffa5" kindref="member">next</ref><sp/>=<sp/>model-&gt;lm3g.tginfo[lw2];</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>model-&gt;lm3g.tginfo[lw2]<sp/>=<sp/>tginfo;</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/>tginfo-&gt;<ref refid="structtginfo__s_1a38d6aa51b244a7138c476a6e663ffbb4" kindref="member">used</ref><sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Trigrams<sp/>for<sp/>w1,w2<sp/>now<sp/>pointed<sp/>to<sp/>by<sp/>tginfo<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/>n<sp/>=<sp/>tginfo-&gt;<ref refid="structtginfo__s_1a5eb046b3d09a4c80e4cdf216c6c7eb46" kindref="member">n_tg</ref>;</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/>tg<sp/>=<sp/>tginfo-&gt;<ref refid="structtginfo__s_1a3642dc5ac56de1829665bb7d42c9372a" kindref="member">tg</ref>;</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((i<sp/>=<sp/>find_tg(tg,<sp/>n,<sp/>lw3))<sp/>&gt;=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Access<sp/>mode<sp/>=<sp/>trigram<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*n_used<sp/>=<sp/>3;</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>score<sp/>=<sp/>model-&gt;lm3g.<ref refid="structtrigram__s_1a52f3fad42f7c653a469af0c1b75988a9" kindref="member">prob3</ref>[tg[i].<ref refid="structtrigram__s_1a52f3fad42f7c653a469af0c1b75988a9" kindref="member">prob3</ref>].l;</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>score<sp/>=<sp/>tginfo-&gt;<ref refid="structtginfo__s_1ac5e9be48da8563941be03f3cd09e3c25" kindref="member">bowt</ref><sp/>+<sp/>lm3g_bg_score(model,<sp/>lw2,<sp/>lw3,<sp/>n_used);</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(score);</highlight></codeline>
<codeline lineno="202"><highlight class="normal">}</highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>int32</highlight></codeline>
<codeline lineno="205"><highlight class="normal">lm3g_template_score(<ref refid="structngram__model__s" kindref="compound">ngram_model_t</ref><sp/>*base,<sp/>int32<sp/>wid,</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int32<sp/>*history,<sp/>int32<sp/>n_hist,</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int32<sp/>*n_used)</highlight></codeline>
<codeline lineno="208"><highlight class="normal">{</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/>NGRAM_MODEL_TYPE<sp/>*model<sp/>=<sp/>(NGRAM_MODEL_TYPE<sp/>*)base;</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(n_hist)<sp/>{</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>0:</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Access<sp/>mode:<sp/>unigram<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*n_used<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>model-&gt;lm3g.unigrams[wid].prob1.l;</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>1:</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>lm3g_bg_score(model,<sp/>history[0],<sp/>wid,<sp/>n_used);</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>2:</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Anything<sp/>greater<sp/>than<sp/>2<sp/>is<sp/>the<sp/>same<sp/>as<sp/>a<sp/>trigram<sp/>for<sp/>now.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>lm3g_tg_score(model,<sp/>history[1],<sp/>history[0],<sp/>wid,<sp/>n_used);</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="222"><highlight class="normal">}</highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>int32</highlight></codeline>
<codeline lineno="225"><highlight class="normal">lm3g_template_raw_score(<ref refid="structngram__model__s" kindref="compound">ngram_model_t</ref><sp/>*base,<sp/>int32<sp/>wid,</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int32<sp/>*history,<sp/>int32<sp/>n_hist,</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int32<sp/>*n_used)</highlight></codeline>
<codeline lineno="228"><highlight class="normal">{</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/>NGRAM_MODEL_TYPE<sp/>*model<sp/>=<sp/>(NGRAM_MODEL_TYPE<sp/>*)base;</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/>int32<sp/>score;</highlight></codeline>
<codeline lineno="231"><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(n_hist)<sp/>{</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>0:</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Access<sp/>mode:<sp/>unigram<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*n_used<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Undo<sp/>insertion<sp/>penalty.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>score<sp/>=<sp/>model-&gt;lm3g.unigrams[wid].prob1.l<sp/>-<sp/>base-&gt;<ref refid="structngram__model__s_1a3d6bf5632760a16e52cb881d7010d774" kindref="member">log_wip</ref>;</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Undo<sp/>language<sp/>weight.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>score<sp/>=<sp/>(int32)(score<sp/>/<sp/>base-&gt;<ref refid="structngram__model__s_1a76ea0c65b23de80091e7c602bdb43bde" kindref="member">lw</ref>);</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Undo<sp/>unigram<sp/>interpolation<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(base-&gt;<ref refid="structngram__model__s_1ae625e779e340845f03fb3da164e93039" kindref="member">word_str</ref>[wid],<sp/></highlight><highlight class="stringliteral">&quot;&lt;s&gt;&quot;</highlight><highlight class="normal">)<sp/>!=<sp/>0)<sp/>{<sp/></highlight><highlight class="comment">/*<sp/>FIXME:<sp/>configurable<sp/>start_sym<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>This<sp/>operation<sp/>is<sp/>numerically<sp/>unstable,<sp/>so<sp/>try<sp/>to<sp/>avoid<sp/>it</highlight></codeline>
<codeline lineno="243"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>as<sp/>possible<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(base-&gt;<ref refid="structngram__model__s_1a616bf871a67f9cedce17d6b589ee33ea" kindref="member">log_uniform</ref><sp/>+<sp/>base-&gt;<ref refid="structngram__model__s_1aa38c5fdecaefd9a2f43b69f26ae492c1" kindref="member">log_uniform_weight</ref><sp/>&gt;<sp/><ref refid="logmath_8h_1a1c160c28a9e7d25923f391773b1028c0" kindref="member">logmath_get_zero</ref>(base-&gt;<ref refid="structngram__model__s_1a2ca373109c651ac998b33153eb38fd95" kindref="member">lmath</ref>))<sp/>{</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>score<sp/>=<sp/><ref refid="logmath_8h_1aebb4711268322fa7aec31e5798fe7e90" kindref="member">logmath_log</ref>(base-&gt;<ref refid="structngram__model__s_1a2ca373109c651ac998b33153eb38fd95" kindref="member">lmath</ref>,</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="logmath_8h_1ae8b0a168e29e448c0d6de66dc46e099e" kindref="member">logmath_exp</ref>(base-&gt;<ref refid="structngram__model__s_1a2ca373109c651ac998b33153eb38fd95" kindref="member">lmath</ref>,<sp/>score)</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/><ref refid="logmath_8h_1ae8b0a168e29e448c0d6de66dc46e099e" kindref="member">logmath_exp</ref>(base-&gt;<ref refid="structngram__model__s_1a2ca373109c651ac998b33153eb38fd95" kindref="member">lmath</ref>,<sp/></highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>base-&gt;<ref refid="structngram__model__s_1a616bf871a67f9cedce17d6b589ee33ea" kindref="member">log_uniform</ref><sp/>+<sp/>base-&gt;<ref refid="structngram__model__s_1aa38c5fdecaefd9a2f43b69f26ae492c1" kindref="member">log_uniform_weight</ref>));</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>score;</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>1:</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>score<sp/>=<sp/>lm3g_bg_score(model,<sp/>history[0],<sp/>wid,<sp/>n_used);</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>2:</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Anything<sp/>greater<sp/>than<sp/>2<sp/>is<sp/>the<sp/>same<sp/>as<sp/>a<sp/>trigram<sp/>for<sp/>now.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>score<sp/>=<sp/>lm3g_tg_score(model,<sp/>history[1],<sp/>history[0],<sp/>wid,<sp/>n_used);</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>FIXME<sp/>(maybe):<sp/>This<sp/>doesn&apos;t<sp/>undo<sp/>unigram<sp/>weighting<sp/>in<sp/>backoff<sp/>cases.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(int32)((score<sp/>-<sp/>base-&gt;<ref refid="structngram__model__s_1a3d6bf5632760a16e52cb881d7010d774" kindref="member">log_wip</ref>)<sp/>/<sp/>base-&gt;<ref refid="structngram__model__s_1a76ea0c65b23de80091e7c602bdb43bde" kindref="member">lw</ref>);</highlight></codeline>
<codeline lineno="263"><highlight class="normal">}</highlight></codeline>
<codeline lineno="264"><highlight class="normal"></highlight></codeline>
<codeline lineno="265"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>int32</highlight></codeline>
<codeline lineno="266"><highlight class="normal">lm3g_template_add_ug(<ref refid="structngram__model__s" kindref="compound">ngram_model_t</ref><sp/>*base,</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int32<sp/>wid,<sp/>int32<sp/>lweight)</highlight></codeline>
<codeline lineno="268"><highlight class="normal">{</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/>NGRAM_MODEL_TYPE<sp/>*model<sp/>=<sp/>(NGRAM_MODEL_TYPE<sp/>*)base;</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>lm3g_add_ug(base,<sp/>&amp;model-&gt;lm3g,<sp/>wid,<sp/>lweight);</highlight></codeline>
<codeline lineno="271"><highlight class="normal">}</highlight></codeline>
<codeline lineno="272"><highlight class="normal"></highlight></codeline>
<codeline lineno="273"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="274"><highlight class="normal">lm3g_template_flush(<ref refid="structngram__model__s" kindref="compound">ngram_model_t</ref><sp/>*base)</highlight></codeline>
<codeline lineno="275"><highlight class="normal">{</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/>NGRAM_MODEL_TYPE<sp/>*model<sp/>=<sp/>(NGRAM_MODEL_TYPE<sp/>*)base;</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/>lm3g_tginfo_reset(base,<sp/>&amp;model-&gt;lm3g);</highlight></codeline>
<codeline lineno="278"><highlight class="normal">}</highlight></codeline>
<codeline lineno="279"><highlight class="normal"></highlight></codeline>
<codeline lineno="280" refid="structlm3g__iter__s" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structlm3g__iter__s" kindref="compound">lm3g_iter_s</ref><sp/>{</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structngram__iter__s" kindref="compound">ngram_iter_t</ref><sp/>base;</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structunigram__s" kindref="compound">unigram_t</ref><sp/>*ug;</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structbigram__s" kindref="compound">bigram_t</ref><sp/>*bg;</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structtrigram__s" kindref="compound">trigram_t</ref><sp/>*tg;</highlight></codeline>
<codeline lineno="285"><highlight class="normal">}<sp/><ref refid="structlm3g__iter__s" kindref="compound">lm3g_iter_t</ref>;</highlight></codeline>
<codeline lineno="286"><highlight class="normal"></highlight></codeline>
<codeline lineno="287"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structngram__iter__s" kindref="compound">ngram_iter_t</ref><sp/>*</highlight></codeline>
<codeline lineno="288"><highlight class="normal">lm3g_template_iter(<ref refid="structngram__model__s" kindref="compound">ngram_model_t</ref><sp/>*base,<sp/>int32<sp/>wid,</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int32<sp/>*history,<sp/>int32<sp/>n_hist)</highlight></codeline>
<codeline lineno="290"><highlight class="normal">{</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/>NGRAM_MODEL_TYPE<sp/>*model<sp/>=<sp/>(NGRAM_MODEL_TYPE<sp/>*)base;</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structlm3g__iter__s" kindref="compound">lm3g_iter_t</ref><sp/>*itor<sp/>=<sp/>(<ref refid="structlm3g__iter__s" kindref="compound">lm3g_iter_t</ref><sp/>*)<ref refid="ckd__alloc_8h_1aa00ef21903bc4f8a972488417adc8d2e" kindref="member">ckd_calloc</ref>(1,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*itor));</highlight></codeline>
<codeline lineno="293"><highlight class="normal"></highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/>ngram_iter_init((<ref refid="structngram__iter__s" kindref="compound">ngram_iter_t</ref><sp/>*)itor,<sp/>base,<sp/>n_hist,<sp/>FALSE);</highlight></codeline>
<codeline lineno="295"><highlight class="normal"></highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n_hist<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Unigram<sp/>is<sp/>the<sp/>easiest.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>itor-&gt;ug<sp/>=<sp/>model-&gt;lm3g.unigrams<sp/>+<sp/>wid;</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structngram__iter__s" kindref="compound">ngram_iter_t</ref><sp/>*)itor;</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n_hist<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int32<sp/>i,<sp/>n,<sp/>b;</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Find<sp/>the<sp/>bigram,<sp/>as<sp/>in<sp/>bg_score<sp/>above<sp/>(duplicate<sp/>code...)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>itor-&gt;ug<sp/>=<sp/>model-&gt;lm3g.unigrams<sp/>+<sp/>history[0];</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>b<sp/>=<sp/>FIRST_BG(model,<sp/>history[0]);</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n<sp/>=<sp/>FIRST_BG(model,<sp/>history[0]<sp/>+<sp/>1)<sp/>-<sp/>b;</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>itor-&gt;bg<sp/>=<sp/>model-&gt;lm3g.bigrams<sp/>+<sp/>b;</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>If<sp/>no<sp/>such<sp/>bigram<sp/>exists<sp/>then<sp/>fail.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((i<sp/>=<sp/>find_bg(itor-&gt;bg,<sp/>n,<sp/>wid))<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="ngram__model_8h_1ac9f746c8a5db78ef8b2fb7c312be4a22" kindref="member">ngram_iter_free</ref>((<ref refid="structngram__iter__s" kindref="compound">ngram_iter_t</ref><sp/>*)itor);</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>itor-&gt;bg<sp/>+=<sp/>i;</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structngram__iter__s" kindref="compound">ngram_iter_t</ref><sp/>*)itor;</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n_hist<sp/>==<sp/>2)<sp/>{</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int32<sp/>i,<sp/>n;</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structtginfo__s" kindref="compound">tginfo_t</ref><sp/>*tginfo,<sp/>*prev_tginfo;</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Find<sp/>the<sp/>trigram,<sp/>as<sp/>in<sp/>tg_score<sp/>above<sp/>(duplicate<sp/>code...)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>itor-&gt;ug<sp/>=<sp/>model-&gt;lm3g.unigrams<sp/>+<sp/>history[1];</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>prev_tginfo<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(tginfo<sp/>=<sp/>model-&gt;lm3g.tginfo[history[0]];</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tginfo;<sp/>tginfo<sp/>=<sp/>tginfo-&gt;<ref refid="structtginfo__s_1a184e60660a4c8168b5268260cd98ffa5" kindref="member">next</ref>)<sp/>{</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tginfo-&gt;<ref refid="structtginfo__s_1aa151a34891820c55e0fef60cc74b6e05" kindref="member">w1</ref><sp/>==<sp/>history[1])</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>prev_tginfo<sp/>=<sp/>tginfo;</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="328"><highlight class="normal"></highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!tginfo)<sp/>{</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>load_tginfo(model,<sp/>history[1],<sp/>history[0]);</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tginfo<sp/>=<sp/>model-&gt;lm3g.tginfo[history[0]];</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(prev_tginfo)<sp/>{</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>prev_tginfo-&gt;<ref refid="structtginfo__s_1a184e60660a4c8168b5268260cd98ffa5" kindref="member">next</ref><sp/>=<sp/>tginfo-&gt;<ref refid="structtginfo__s_1a184e60660a4c8168b5268260cd98ffa5" kindref="member">next</ref>;</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tginfo-&gt;<ref refid="structtginfo__s_1a184e60660a4c8168b5268260cd98ffa5" kindref="member">next</ref><sp/>=<sp/>model-&gt;lm3g.tginfo[history[0]];</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>model-&gt;lm3g.tginfo[history[0]]<sp/>=<sp/>tginfo;</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="338"><highlight class="normal"></highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tginfo-&gt;<ref refid="structtginfo__s_1a38d6aa51b244a7138c476a6e663ffbb4" kindref="member">used</ref><sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="340"><highlight class="normal"></highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Trigrams<sp/>for<sp/>w1,w2<sp/>now<sp/>pointed<sp/>to<sp/>by<sp/>tginfo<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n<sp/>=<sp/>tginfo-&gt;<ref refid="structtginfo__s_1a5eb046b3d09a4c80e4cdf216c6c7eb46" kindref="member">n_tg</ref>;</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>itor-&gt;tg<sp/>=<sp/>tginfo-&gt;<ref refid="structtginfo__s_1a3642dc5ac56de1829665bb7d42c9372a" kindref="member">tg</ref>;</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((i<sp/>=<sp/>find_tg(itor-&gt;tg,<sp/>n,<sp/>wid))<sp/>&gt;=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>itor-&gt;tg<sp/>+=<sp/>i;</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Now<sp/>advance<sp/>the<sp/>bigram<sp/>pointer<sp/>accordingly.<sp/><sp/>FIXME:</highlight></codeline>
<codeline lineno="347"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>Note<sp/>that<sp/>we<sp/>actually<sp/>already<sp/>found<sp/>the<sp/>relevant<sp/>bigram</highlight></codeline>
<codeline lineno="348"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>in<sp/>load_tginfo.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>itor-&gt;bg<sp/>=<sp/>model-&gt;lm3g.bigrams;</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(FIRST_TG(model,<sp/>(itor-&gt;bg<sp/>-<sp/>model-&gt;lm3g.bigrams<sp/>+<sp/>1))</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;=<sp/>(itor-&gt;tg<sp/>-<sp/>model-&gt;lm3g.trigrams))</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++itor-&gt;bg;</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structngram__iter__s" kindref="compound">ngram_iter_t</ref><sp/>*)itor;</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="ngram__model_8h_1ac9f746c8a5db78ef8b2fb7c312be4a22" kindref="member">ngram_iter_free</ref>((<ref refid="structngram__iter__s" kindref="compound">ngram_iter_t</ref><sp/>*)itor);</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structngram__iter__s" kindref="compound">ngram_iter_t</ref><sp/>*)NULL;</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Should<sp/>not<sp/>happen.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(n_hist<sp/>==<sp/>0);<sp/></highlight><highlight class="comment">/*<sp/>Guaranteed<sp/>to<sp/>fail.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="ngram__model_8h_1ac9f746c8a5db78ef8b2fb7c312be4a22" kindref="member">ngram_iter_free</ref>((<ref refid="structngram__iter__s" kindref="compound">ngram_iter_t</ref><sp/>*)itor);</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="366"><highlight class="normal">}</highlight></codeline>
<codeline lineno="367"><highlight class="normal"></highlight></codeline>
<codeline lineno="368"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structngram__iter__s" kindref="compound">ngram_iter_t</ref><sp/>*</highlight></codeline>
<codeline lineno="369"><highlight class="normal">lm3g_template_mgrams(<ref refid="structngram__model__s" kindref="compound">ngram_model_t</ref><sp/>*base,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>m)</highlight></codeline>
<codeline lineno="370"><highlight class="normal">{</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/>NGRAM_MODEL_TYPE<sp/>*model<sp/>=<sp/>(NGRAM_MODEL_TYPE<sp/>*)base;</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structlm3g__iter__s" kindref="compound">lm3g_iter_t</ref><sp/>*itor<sp/>=<sp/>(<ref refid="structlm3g__iter__s" kindref="compound">lm3g_iter_t</ref><sp/>*)<ref refid="ckd__alloc_8h_1aa00ef21903bc4f8a972488417adc8d2e" kindref="member">ckd_calloc</ref>(1,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*itor));</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/>ngram_iter_init((<ref refid="structngram__iter__s" kindref="compound">ngram_iter_t</ref><sp/>*)itor,<sp/>base,<sp/>m,<sp/>FALSE);</highlight></codeline>
<codeline lineno="374"><highlight class="normal"></highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/>itor-&gt;ug<sp/>=<sp/>model-&gt;lm3g.unigrams;</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/>itor-&gt;bg<sp/>=<sp/>model-&gt;lm3g.bigrams;</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/>itor-&gt;tg<sp/>=<sp/>model-&gt;lm3g.trigrams;</highlight></codeline>
<codeline lineno="378"><highlight class="normal"></highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Advance<sp/>bigram<sp/>pointer<sp/>to<sp/>match<sp/>first<sp/>trigram.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m<sp/>&gt;<sp/>1<sp/>&amp;&amp;<sp/>base-&gt;<ref refid="structngram__model__s_1a9dcba9b49cc1cd189b257e5838da0eee" kindref="member">n_counts</ref>[1]<sp/>&gt;<sp/>1)<sp/><sp/>{</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(FIRST_TG(model,<sp/>(itor-&gt;bg<sp/>-<sp/>model-&gt;lm3g.bigrams<sp/>+<sp/>1))</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;=<sp/>(itor-&gt;tg<sp/>-<sp/>model-&gt;lm3g.trigrams))</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++itor-&gt;bg;</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="385"><highlight class="normal"></highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Advance<sp/>unigram<sp/>pointer<sp/>to<sp/>match<sp/>first<sp/>bigram.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m<sp/>&gt;<sp/>0<sp/>&amp;&amp;<sp/>base-&gt;<ref refid="structngram__model__s_1a9dcba9b49cc1cd189b257e5838da0eee" kindref="member">n_counts</ref>[0]<sp/>&gt;<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(itor-&gt;ug[1].<ref refid="structunigram__s_1ae148f631c0d9851b14bb9cb31c0c061d" kindref="member">bigrams</ref><sp/>&lt;=<sp/>(itor-&gt;bg<sp/>-<sp/>model-&gt;lm3g.bigrams))</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++itor-&gt;ug;</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="391"><highlight class="normal"></highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structngram__iter__s" kindref="compound">ngram_iter_t</ref><sp/>*)itor;</highlight></codeline>
<codeline lineno="393"><highlight class="normal">}</highlight></codeline>
<codeline lineno="394"><highlight class="normal"></highlight></codeline>
<codeline lineno="395"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structngram__iter__s" kindref="compound">ngram_iter_t</ref><sp/>*</highlight></codeline>
<codeline lineno="396"><highlight class="normal">lm3g_template_successors(<ref refid="structngram__iter__s" kindref="compound">ngram_iter_t</ref><sp/>*bitor)</highlight></codeline>
<codeline lineno="397"><highlight class="normal">{</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/>NGRAM_MODEL_TYPE<sp/>*model<sp/>=<sp/>(NGRAM_MODEL_TYPE<sp/>*)bitor-&gt;model;</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structlm3g__iter__s" kindref="compound">lm3g_iter_t</ref><sp/>*from<sp/>=<sp/>(<ref refid="structlm3g__iter__s" kindref="compound">lm3g_iter_t</ref><sp/>*)bitor;</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structlm3g__iter__s" kindref="compound">lm3g_iter_t</ref><sp/>*itor<sp/>=<sp/>(<ref refid="structlm3g__iter__s" kindref="compound">lm3g_iter_t</ref><sp/>*)<ref refid="ckd__alloc_8h_1aa00ef21903bc4f8a972488417adc8d2e" kindref="member">ckd_calloc</ref>(1,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*itor));</highlight></codeline>
<codeline lineno="401"><highlight class="normal"></highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/>itor-&gt;ug<sp/>=<sp/>from-&gt;ug;</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(bitor-&gt;<ref refid="structngram__iter__s_1a80bce30ba5b180f85ca84d7288715858" kindref="member">m</ref>)<sp/>{</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>0:</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Next<sp/>itor<sp/>bigrams<sp/>is<sp/>the<sp/>same<sp/>as<sp/>this<sp/>itor<sp/>bigram<sp/>or</highlight></codeline>
<codeline lineno="406"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>itor<sp/>bigrams<sp/>is<sp/>more<sp/>than<sp/>total<sp/>count.<sp/>This<sp/>means<sp/>no<sp/>successors<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(((itor-&gt;ug<sp/>+<sp/>1)<sp/>-<sp/>model-&gt;lm3g.unigrams<sp/>&lt;<sp/>bitor-&gt;model-&gt;<ref refid="structngram__model__s_1a9dcba9b49cc1cd189b257e5838da0eee" kindref="member">n_counts</ref>[0]<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>itor-&gt;ug-&gt;<ref refid="structunigram__s_1ae148f631c0d9851b14bb9cb31c0c061d" kindref="member">bigrams</ref><sp/>==<sp/>(itor-&gt;ug<sp/>+<sp/>1)-&gt;bigrams)<sp/>||<sp/></highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>itor-&gt;ug-&gt;<ref refid="structunigram__s_1ae148f631c0d9851b14bb9cb31c0c061d" kindref="member">bigrams</ref><sp/>==<sp/>bitor-&gt;model-&gt;<ref refid="structngram__model__s_1a9dcba9b49cc1cd189b257e5838da0eee" kindref="member">n_counts</ref>[1])</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>done;</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Start<sp/>iterating<sp/>from<sp/>first<sp/>bigram<sp/>successor<sp/>of<sp/>from-&gt;ug.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>itor-&gt;bg<sp/>=<sp/>model-&gt;lm3g.bigrams<sp/>+<sp/>itor-&gt;ug-&gt;<ref refid="structunigram__s_1ae148f631c0d9851b14bb9cb31c0c061d" kindref="member">bigrams</ref>;</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>1:</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>itor-&gt;bg<sp/>=<sp/>from-&gt;bg;</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>This<sp/>indicates<sp/>no<sp/>successors<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(((itor-&gt;bg<sp/>+<sp/>1)<sp/>-<sp/>model-&gt;lm3g.bigrams<sp/>&lt;<sp/>bitor-&gt;model-&gt;<ref refid="structngram__model__s_1a9dcba9b49cc1cd189b257e5838da0eee" kindref="member">n_counts</ref>[1]<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FIRST_TG<sp/>(model,<sp/>itor-&gt;bg<sp/>-<sp/>model-&gt;lm3g.bigrams)<sp/>==<sp/></highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FIRST_TG<sp/>(model,<sp/>(itor-&gt;bg<sp/>+<sp/>1)<sp/>-<sp/>model-&gt;lm3g.bigrams))<sp/>||</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FIRST_TG<sp/>(model,<sp/>itor-&gt;bg<sp/>-<sp/>model-&gt;lm3g.bigrams)<sp/>==<sp/>bitor-&gt;model-&gt;<ref refid="structngram__model__s_1a9dcba9b49cc1cd189b257e5838da0eee" kindref="member">n_counts</ref>[2])</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>done;</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Start<sp/>iterating<sp/>from<sp/>first<sp/>trigram<sp/>successor<sp/>of<sp/>from-&gt;bg.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>itor-&gt;tg<sp/>=<sp/>(model-&gt;lm3g.trigrams<sp/></highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/>FIRST_TG(model,<sp/>(itor-&gt;bg<sp/>-<sp/>model-&gt;lm3g.bigrams)));</highlight></codeline>
<codeline lineno="428"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;%s<sp/>%s<sp/>=&gt;<sp/>%d<sp/>(%s)\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>model-&gt;base.word_str[itor-&gt;ug<sp/>-<sp/>model-&gt;lm3g.unigrams],</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>model-&gt;base.word_str[itor-&gt;bg-&gt;<ref refid="structbigram__s_1af66faad954d56f5ceaf6ba47cdcd9b1f" kindref="member">wid</ref>],</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FIRST_TG(model,<sp/>(itor-&gt;bg<sp/>-<sp/>model-&gt;lm3g.bigrams)),</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>model-&gt;base.word_str[itor-&gt;tg-&gt;<ref refid="structtrigram__s_1a492e1fedb16fa11d26a941177c1305be" kindref="member">wid</ref>]);</highlight></codeline>
<codeline lineno="434"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>2:</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>All<sp/>invalid!<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>done;</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="441"><highlight class="normal"></highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/>ngram_iter_init((<ref refid="structngram__iter__s" kindref="compound">ngram_iter_t</ref><sp/>*)itor,<sp/>bitor-&gt;model,<sp/>bitor-&gt;<ref refid="structngram__iter__s_1a80bce30ba5b180f85ca84d7288715858" kindref="member">m</ref><sp/>+<sp/>1,<sp/>TRUE);</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structngram__iter__s" kindref="compound">ngram_iter_t</ref><sp/>*)itor;</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/>done:</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="ckd__alloc_8h_1a31c6b405558620ac37599737b5722fbf" kindref="member">ckd_free</ref>(itor);</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="447"><highlight class="normal">}</highlight></codeline>
<codeline lineno="448"><highlight class="normal"></highlight></codeline>
<codeline lineno="449"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>int32<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*</highlight></codeline>
<codeline lineno="450"><highlight class="normal">lm3g_template_iter_get(<ref refid="structngram__iter__s" kindref="compound">ngram_iter_t</ref><sp/>*base,</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int32<sp/>*out_score,<sp/>int32<sp/>*out_bowt)</highlight></codeline>
<codeline lineno="452"><highlight class="normal">{</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/>NGRAM_MODEL_TYPE<sp/>*model<sp/>=<sp/>(NGRAM_MODEL_TYPE<sp/>*)base-&gt;model;</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structlm3g__iter__s" kindref="compound">lm3g_iter_t</ref><sp/>*itor<sp/>=<sp/>(<ref refid="structlm3g__iter__s" kindref="compound">lm3g_iter_t</ref><sp/>*)base;</highlight></codeline>
<codeline lineno="455"><highlight class="normal"></highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/>base-&gt;<ref refid="structngram__iter__s_1a1362ebe2dcf1c441929c845fc97958cb" kindref="member">wids</ref>[0]<sp/>=<sp/>itor-&gt;ug<sp/>-<sp/>model-&gt;lm3g.unigrams;</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(itor-&gt;bg)<sp/>base-&gt;<ref refid="structngram__iter__s_1a1362ebe2dcf1c441929c845fc97958cb" kindref="member">wids</ref>[1]<sp/>=<sp/>itor-&gt;bg-&gt;<ref refid="structbigram__s_1af66faad954d56f5ceaf6ba47cdcd9b1f" kindref="member">wid</ref>;</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(itor-&gt;tg)<sp/>base-&gt;<ref refid="structngram__iter__s_1a1362ebe2dcf1c441929c845fc97958cb" kindref="member">wids</ref>[2]<sp/>=<sp/>itor-&gt;tg-&gt;<ref refid="structtrigram__s_1a492e1fedb16fa11d26a941177c1305be" kindref="member">wid</ref>;</highlight></codeline>
<codeline lineno="459"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;itor_get:<sp/>%d<sp/>%d<sp/>%d\n&quot;</highlight><highlight class="normal">,<sp/>base-&gt;<ref refid="structngram__iter__s_1a1362ebe2dcf1c441929c845fc97958cb" kindref="member">wids</ref>[0],<sp/>base-&gt;<ref refid="structngram__iter__s_1a1362ebe2dcf1c441929c845fc97958cb" kindref="member">wids</ref>[1],<sp/>base-&gt;<ref refid="structngram__iter__s_1a1362ebe2dcf1c441929c845fc97958cb" kindref="member">wids</ref>[2]);</highlight></codeline>
<codeline lineno="461"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="462"><highlight class="normal"></highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(base-&gt;<ref refid="structngram__iter__s_1a80bce30ba5b180f85ca84d7288715858" kindref="member">m</ref>)<sp/>{</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>0:</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*out_score<sp/>=<sp/>itor-&gt;ug-&gt;<ref refid="structunigram__s_1a488db9623272838a933cd4b768409fea" kindref="member">prob1</ref>.l;</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*out_bowt<sp/>=<sp/>itor-&gt;ug-&gt;<ref refid="structunigram__s_1ad33b4af5b40a8d13ffae932bab003df6" kindref="member">bo_wt1</ref>.l;</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>1:</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*out_score<sp/>=<sp/>model-&gt;lm3g.prob2[itor-&gt;bg-&gt;<ref refid="structbigram__s_1a769b8a54f864ac4844e37cfa17ed1af0" kindref="member">prob2</ref>].l;</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(model-&gt;lm3g.bo_wt2)</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*out_bowt<sp/>=<sp/>model-&gt;lm3g.bo_wt2[itor-&gt;bg-&gt;<ref refid="structbigram__s_1a410991054e81251285cbc209964cdaf4" kindref="member">bo_wt2</ref>].l;</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*out_bowt<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>2:</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*out_score<sp/>=<sp/>model-&gt;lm3g.prob3[itor-&gt;tg-&gt;<ref refid="structtrigram__s_1a52f3fad42f7c653a469af0c1b75988a9" kindref="member">prob3</ref>].l;</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*out_bowt<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:<sp/></highlight><highlight class="comment">/*<sp/>Should<sp/>not<sp/>happen.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>base-&gt;<ref refid="structngram__iter__s_1a1362ebe2dcf1c441929c845fc97958cb" kindref="member">wids</ref>;</highlight></codeline>
<codeline lineno="483"><highlight class="normal">}</highlight></codeline>
<codeline lineno="484"><highlight class="normal"></highlight></codeline>
<codeline lineno="485"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structngram__iter__s" kindref="compound">ngram_iter_t</ref><sp/>*</highlight></codeline>
<codeline lineno="486"><highlight class="normal">lm3g_template_iter_next(<ref refid="structngram__iter__s" kindref="compound">ngram_iter_t</ref><sp/>*base)</highlight></codeline>
<codeline lineno="487"><highlight class="normal">{</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/>NGRAM_MODEL_TYPE<sp/>*model<sp/>=<sp/>(NGRAM_MODEL_TYPE<sp/>*)base-&gt;model;</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structlm3g__iter__s" kindref="compound">lm3g_iter_t</ref><sp/>*itor<sp/>=<sp/>(<ref refid="structlm3g__iter__s" kindref="compound">lm3g_iter_t</ref><sp/>*)base;</highlight></codeline>
<codeline lineno="490"><highlight class="normal"></highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(base-&gt;<ref refid="structngram__iter__s_1a80bce30ba5b180f85ca84d7288715858" kindref="member">m</ref>)<sp/>{</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>0:</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++itor-&gt;ug;</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Check<sp/>for<sp/>end<sp/>condition.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(itor-&gt;ug<sp/>-<sp/>model-&gt;lm3g.unigrams<sp/>&gt;=<sp/>base-&gt;model-&gt;<ref refid="structngram__model__s_1a9dcba9b49cc1cd189b257e5838da0eee" kindref="member">n_counts</ref>[0])</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>done;</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>1:</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++itor-&gt;bg;</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Check<sp/>for<sp/>end<sp/>condition.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(itor-&gt;bg<sp/>-<sp/>model-&gt;lm3g.bigrams<sp/>&gt;=<sp/>base-&gt;model-&gt;<ref refid="structngram__model__s_1a9dcba9b49cc1cd189b257e5838da0eee" kindref="member">n_counts</ref>[1])</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>done;</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Advance<sp/>unigram<sp/>pointer<sp/>if<sp/>necessary<sp/>in<sp/>order<sp/>to<sp/>get<sp/>one</highlight></codeline>
<codeline lineno="504"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>that<sp/>points<sp/>to<sp/>this<sp/>bigram.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(itor-&gt;bg<sp/>-<sp/>model-&gt;lm3g.bigrams<sp/>&gt;=<sp/>itor-&gt;ug[1].<ref refid="structunigram__s_1ae148f631c0d9851b14bb9cb31c0c061d" kindref="member">bigrams</ref>)<sp/>{</highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Stop<sp/>if<sp/>this<sp/>is<sp/>a<sp/>successor<sp/>iterator,<sp/>since<sp/>we<sp/>don&apos;t</highlight></codeline>
<codeline lineno="507"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>want<sp/>a<sp/>new<sp/>unigram.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(base-&gt;<ref refid="structngram__iter__s_1a7802a7883b1cc246b1bff629cd2cfb08" kindref="member">successor</ref>)</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>done;</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++itor-&gt;ug;</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(itor-&gt;ug<sp/>==<sp/>model-&gt;lm3g.unigrams<sp/>+<sp/>base-&gt;model-&gt;<ref refid="structngram__model__s_1a9dcba9b49cc1cd189b257e5838da0eee" kindref="member">n_counts</ref>[0])<sp/>{</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="err_8h_1a87a0a12135a290cf16d06b63fcfa0ccf" kindref="member">E_ERROR</ref>(</highlight><highlight class="stringliteral">&quot;Bigram<sp/>%d<sp/>has<sp/>no<sp/>valid<sp/>unigram<sp/>parent\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>itor-&gt;bg<sp/>-<sp/>model-&gt;lm3g.bigrams);</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>done;</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>2:</highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++itor-&gt;tg;</highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Check<sp/>for<sp/>end<sp/>condition.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(itor-&gt;tg<sp/>-<sp/>model-&gt;lm3g.trigrams<sp/>&gt;=<sp/>base-&gt;model-&gt;<ref refid="structngram__model__s_1a9dcba9b49cc1cd189b257e5838da0eee" kindref="member">n_counts</ref>[2])</highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>done;</highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Advance<sp/>bigram<sp/>pointer<sp/>if<sp/>necessary.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(itor-&gt;tg<sp/>-<sp/>model-&gt;lm3g.trigrams<sp/>&gt;=</highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FIRST_TG(model,<sp/>(itor-&gt;bg<sp/>-<sp/>model-&gt;lm3g.bigrams<sp/>+<sp/>1)))<sp/>{</highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(base-&gt;<ref refid="structngram__iter__s_1a7802a7883b1cc246b1bff629cd2cfb08" kindref="member">successor</ref>)</highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>done;</highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++itor-&gt;bg;</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(itor-&gt;bg<sp/>==<sp/>model-&gt;lm3g.bigrams<sp/>+<sp/>base-&gt;model-&gt;<ref refid="structngram__model__s_1a9dcba9b49cc1cd189b257e5838da0eee" kindref="member">n_counts</ref>[1])<sp/>{</highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="err_8h_1a87a0a12135a290cf16d06b63fcfa0ccf" kindref="member">E_ERROR</ref>(</highlight><highlight class="stringliteral">&quot;Trigram<sp/>%d<sp/>has<sp/>no<sp/>valid<sp/>bigram<sp/>parent\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>itor-&gt;tg<sp/>-<sp/>model-&gt;lm3g.trigrams);</highlight></codeline>
<codeline lineno="532"><highlight class="normal"></highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>done;</highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Advance<sp/>unigram<sp/>pointer<sp/>if<sp/>necessary.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(itor-&gt;bg<sp/>-<sp/>model-&gt;lm3g.bigrams<sp/>&gt;=<sp/>itor-&gt;ug[1].<ref refid="structunigram__s_1ae148f631c0d9851b14bb9cb31c0c061d" kindref="member">bigrams</ref>)<sp/>{</highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++itor-&gt;ug;</highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(itor-&gt;ug<sp/>==<sp/>model-&gt;lm3g.unigrams<sp/>+<sp/>base-&gt;model-&gt;<ref refid="structngram__model__s_1a9dcba9b49cc1cd189b257e5838da0eee" kindref="member">n_counts</ref>[0])<sp/>{</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="err_8h_1a87a0a12135a290cf16d06b63fcfa0ccf" kindref="member">E_ERROR</ref>(</highlight><highlight class="stringliteral">&quot;Trigram<sp/>%d<sp/>has<sp/>no<sp/>valid<sp/>unigram<sp/>parent\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>itor-&gt;tg<sp/>-<sp/>model-&gt;lm3g.trigrams);</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>done;</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:<sp/></highlight><highlight class="comment">/*<sp/>Should<sp/>not<sp/>happen.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>done;</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="549"><highlight class="normal"></highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structngram__iter__s" kindref="compound">ngram_iter_t</ref><sp/>*)itor;</highlight></codeline>
<codeline lineno="551"><highlight class="normal">done:</highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="ngram__model_8h_1ac9f746c8a5db78ef8b2fb7c312be4a22" kindref="member">ngram_iter_free</ref>(base);</highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="554"><highlight class="normal">}</highlight></codeline>
<codeline lineno="555"><highlight class="normal"></highlight></codeline>
<codeline lineno="556"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="557"><highlight class="normal">lm3g_template_iter_free(<ref refid="structngram__iter__s" kindref="compound">ngram_iter_t</ref><sp/>*base)</highlight></codeline>
<codeline lineno="558"><highlight class="normal">{</highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="ckd__alloc_8h_1a31c6b405558620ac37599737b5722fbf" kindref="member">ckd_free</ref>(base);</highlight></codeline>
<codeline lineno="560"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/home/hkl/voice/sphinxbase/src/libsphinxbase/lm/lm3g_templates.c"/>
  </compounddef>
</doxygen>
